diff --git a/dist/chunks/global.CnI8_G5V.d.ts b/dist/chunks/global.CnI8_G5V.d.ts
index 431316243b0c3b871536f8d18db8614c2de8801c..c53b80ba1afa4603749fc4859a9bd3fcbe1da4da 100644
--- a/dist/chunks/global.CnI8_G5V.d.ts
+++ b/dist/chunks/global.CnI8_G5V.d.ts
@@ -52,82 +52,82 @@ interface InlineSnapshotMatcher<T> {
     }>(properties: Partial<U>, snapshot?: string, message?: string): void;
     (message?: string): void;
 }
-declare module '@vitest/expect' {
-    interface MatcherState {
-        environment: string;
-        snapshotState: SnapshotState;
-    }
-    interface ExpectPollOptions {
-        interval?: number;
-        timeout?: number;
-        message?: string;
-    }
-    interface ExpectStatic {
-        unreachable: (message?: string) => never;
-        soft: <T>(actual: T, message?: string) => Assertion<T>;
-        poll: <T>(actual: () => T, options?: ExpectPollOptions) => PromisifyAssertion<Awaited<T>>;
-        addEqualityTesters: (testers: Array<Tester>) => void;
-        assertions: (expected: number) => void;
-        hasAssertions: () => void;
-        addSnapshotSerializer: (plugin: Plugin) => void;
-    }
-    interface Assertion<T> {
-        matchSnapshot: SnapshotMatcher<T>;
-        toMatchSnapshot: SnapshotMatcher<T>;
-        toMatchInlineSnapshot: InlineSnapshotMatcher<T>;
-        /**
-         * Checks that an error thrown by a function matches a previously recorded snapshot.
-         *
-         * @param message - Optional custom error message.
-         *
-         * @example
-         * expect(functionWithError).toThrowErrorMatchingSnapshot();
-         */
-        toThrowErrorMatchingSnapshot: (message?: string) => void;
-        /**
-         * Checks that an error thrown by a function matches an inline snapshot within the test file.
-         * Useful for keeping snapshots close to the test code.
-         *
-         * @param snapshot - Optional inline snapshot string to match.
-         * @param message - Optional custom error message.
-         *
-         * @example
-         * const throwError = () => { throw new Error('Error occurred') };
-         * expect(throwError).toThrowErrorMatchingInlineSnapshot(`"Error occurred"`);
-         */
-        toThrowErrorMatchingInlineSnapshot: (snapshot?: string, message?: string) => void;
-        /**
-         * Compares the received value to a snapshot saved in a specified file.
-         * Useful for cases where snapshot content is large or needs to be shared across tests.
-         *
-         * @param filepath - Path to the snapshot file.
-         * @param message - Optional custom error message.
-         *
-         * @example
-         * await expect(largeData).toMatchFileSnapshot('path/to/snapshot.json');
-         */
-        toMatchFileSnapshot: (filepath: string, message?: string) => Promise<void>;
-    }
-}
-declare module '@vitest/runner' {
-    interface TestContext {
-        expect: ExpectStatic;
-    }
-    interface TaskMeta {
-        typecheck?: boolean;
-        benchmark?: boolean;
-        failScreenshotPath?: string;
-    }
-    interface File {
-        prepareDuration?: number;
-        environmentLoad?: number;
-    }
-    interface TaskBase {
-        logs?: UserConsoleLog[];
-    }
-    interface TaskResult {
-        benchmark?: BenchmarkResult;
-    }
-}
+// declare module '@vitest/expect' {
+//     interface MatcherState {
+//         environment: string;
+//         snapshotState: SnapshotState;
+//     }
+//     interface ExpectPollOptions {
+//         interval?: number;
+//         timeout?: number;
+//         message?: string;
+//     }
+//     interface ExpectStatic {
+//         unreachable: (message?: string) => never;
+//         soft: <T>(actual: T, message?: string) => Assertion<T>;
+//         poll: <T>(actual: () => T, options?: ExpectPollOptions) => PromisifyAssertion<Awaited<T>>;
+//         addEqualityTesters: (testers: Array<Tester>) => void;
+//         assertions: (expected: number) => void;
+//         hasAssertions: () => void;
+//         addSnapshotSerializer: (plugin: Plugin) => void;
+//     }
+//     interface Assertion<T> {
+//         matchSnapshot: SnapshotMatcher<T>;
+//         toMatchSnapshot: SnapshotMatcher<T>;
+//         toMatchInlineSnapshot: InlineSnapshotMatcher<T>;
+//         /**
+//          * Checks that an error thrown by a function matches a previously recorded snapshot.
+//          *
+//          * @param message - Optional custom error message.
+//          *
+//          * @example
+//          * expect(functionWithError).toThrowErrorMatchingSnapshot();
+//          */
+//         toThrowErrorMatchingSnapshot: (message?: string) => void;
+//         /**
+//          * Checks that an error thrown by a function matches an inline snapshot within the test file.
+//          * Useful for keeping snapshots close to the test code.
+//          *
+//          * @param snapshot - Optional inline snapshot string to match.
+//          * @param message - Optional custom error message.
+//          *
+//          * @example
+//          * const throwError = () => { throw new Error('Error occurred') };
+//          * expect(throwError).toThrowErrorMatchingInlineSnapshot(`"Error occurred"`);
+//          */
+//         toThrowErrorMatchingInlineSnapshot: (snapshot?: string, message?: string) => void;
+//         /**
+//          * Compares the received value to a snapshot saved in a specified file.
+//          * Useful for cases where snapshot content is large or needs to be shared across tests.
+//          *
+//          * @param filepath - Path to the snapshot file.
+//          * @param message - Optional custom error message.
+//          *
+//          * @example
+//          * await expect(largeData).toMatchFileSnapshot('path/to/snapshot.json');
+//          */
+//         toMatchFileSnapshot: (filepath: string, message?: string) => Promise<void>;
+//     }
+// }
+// declare module '@vitest/runner' {
+//     interface TestContext {
+//         expect: ExpectStatic;
+//     }
+//     interface TaskMeta {
+//         typecheck?: boolean;
+//         benchmark?: boolean;
+//         failScreenshotPath?: string;
+//     }
+//     interface File {
+//         prepareDuration?: number;
+//         environmentLoad?: number;
+//     }
+//     interface TaskBase {
+//         logs?: UserConsoleLog[];
+//     }
+//     interface TaskResult {
+//         benchmark?: BenchmarkResult;
+//     }
+// }
 
 export type { CollectLineNumbers as C, RawErrsMap as R, TscErrorInfo as T, CollectLines as a, RootAndTarget as b, Context as c };
diff --git a/dist/index.d.ts b/dist/index.d.ts
index d221e0fc1569f44999de25d05edf8696fa2d6d90..4fba407e3fd94f793eeb32b834f8b85e629dad7d 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -617,4 +617,82 @@ type SerializableSpec = SerializedTestSpecification;
 /** @deprecated import from `vitest/node` instead */
 type BenchmarkUserOptions = BenchmarkUserOptions$1;
 
+// declare module '@vitest/expect' {
+    interface MatcherState {
+        environment: string;
+        snapshotState: SnapshotState;
+    }
+    interface ExpectPollOptions {
+        interval?: number;
+        timeout?: number;
+        message?: string;
+    }
+    interface ExpectStatic {
+        unreachable: (message?: string) => never;
+        soft: <T>(actual: T, message?: string) => Assertion<T>;
+        poll: <T>(actual: () => T, options?: ExpectPollOptions) => PromisifyAssertion<Awaited<T>>;
+        addEqualityTesters: (testers: Array<Tester>) => void;
+        assertions: (expected: number) => void;
+        hasAssertions: () => void;
+        addSnapshotSerializer: (plugin: Plugin) => void;
+    }
+    interface Assertion<T> {
+        matchSnapshot: SnapshotMatcher<T>;
+        toMatchSnapshot: SnapshotMatcher<T>;
+        toMatchInlineSnapshot: InlineSnapshotMatcher<T>;
+        /**
+         * Checks that an error thrown by a function matches a previously recorded snapshot.
+         *
+         * @param message - Optional custom error message.
+         *
+         * @example
+         * expect(functionWithError).toThrowErrorMatchingSnapshot();
+         */
+        toThrowErrorMatchingSnapshot: (message?: string) => void;
+        /**
+         * Checks that an error thrown by a function matches an inline snapshot within the test file.
+         * Useful for keeping snapshots close to the test code.
+         *
+         * @param snapshot - Optional inline snapshot string to match.
+         * @param message - Optional custom error message.
+         *
+         * @example
+         * const throwError = () => { throw new Error('Error occurred') };
+         * expect(throwError).toThrowErrorMatchingInlineSnapshot(`"Error occurred"`);
+         */
+        toThrowErrorMatchingInlineSnapshot: (snapshot?: string, message?: string) => void;
+        /**
+         * Compares the received value to a snapshot saved in a specified file.
+         * Useful for cases where snapshot content is large or needs to be shared across tests.
+         *
+         * @param filepath - Path to the snapshot file.
+         * @param message - Optional custom error message.
+         *
+         * @example
+         * await expect(largeData).toMatchFileSnapshot('path/to/snapshot.json');
+         */
+        toMatchFileSnapshot: (filepath: string, message?: string) => Promise<void>;
+    }
+// }
+// declare module '@vitest/runner' {
+    interface TestContext {
+        expect: ExpectStatic;
+    }
+    interface TaskMeta {
+        typecheck?: boolean;
+        benchmark?: boolean;
+        failScreenshotPath?: string;
+    }
+    interface File {
+        prepareDuration?: number;
+        environmentLoad?: number;
+    }
+    interface TaskBase {
+        logs?: UserConsoleLog[];
+    }
+    interface TaskResult {
+        benchmark?: BenchmarkResult;
+    }
+// }
+
 export { type ApiConfig, type ArgumentsType, type Arrayable, type AssertType, type Awaitable, type BaseCoverageOptions, type BenchmarkUserOptions, type BrowserConfigOptions, type BrowserScript, type BrowserUI, type BuiltinEnvironment, type CSSModuleScopeStrategy, type CollectLineNumbers, type CollectLines, type Constructable, type Context, type CoverageIstanbulOptions, type CoverageOptions, type CoverageProvider, type CoverageProviderModule, type CoverageReporter, type CoverageV8Options, type Custom, type CustomProviderOptions, type DepsOptimizationOptions, type DoneCallback, type Environment, type EnvironmentOptions, type EnvironmentReturn, type File, type HappyDOMOptions, type InlineConfig, type JSDOMOptions, ModuleGraphData, type MutableArray, type Nullable, type Pool, type PoolOptions, type ProjectConfig, ProvidedContext, type RawErrsMap, type ReportContext, type Reporter, type ResolvedConfig, type ResolvedCoverageOptions, type ResolvedTestEnvironment, type RootAndTarget, type RuntimeContext, type SequenceHooks, type SequenceSetupFiles, type SerializableSpec, SerializedConfig, SerializedTestSpecification, type Suite, type SuiteHooks, type Task, type TaskBase, type TaskResult, type TaskResultPack, type Test, type TransformModePatterns, type TransformResultWithSource, type TscErrorInfo, type TypecheckConfig, type UserConfig, UserConsoleLog, type UserWorkspaceConfig, type Vitest, type VitestEnvironment, type VitestRunMode, type VitestUtils, type VmEnvironmentReturn, type WebSocketEvents, type WebSocketHandlers, type WebSocketRPC, type WorkerContext, type WorkerRPC, assertType, createExpect, globalExpect as expect, getRunningMode, inject, isFirstRun, isWatchMode, runOnce, vi, vitest };
